/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Account;
import io.swagger.model.CreateAccountPostBody;
import io.swagger.model.UpdateAccountPutBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-06-02T13:47:48.293Z[GMT]")
@Validated
public interface AccountsApi {

    @Operation(summary = "Open a new account.", description = "Creates a new account with the specified IBAN.", security = {
        @SecurityRequirement(name = "AuthToken")    }, tags={ "Employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The account has been created successfully.", content = @Content(schema = @Schema(implementation = Account.class))),
        
        @ApiResponse(responseCode = "400", description = "The given input was not valid for this operation at this endpoint."),
        
        @ApiResponse(responseCode = "401", description = "The current auth token does not provide access to this resource."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error has occurred.") })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Account> createAccount(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateAccountPostBody body);


    @Operation(summary = "Delete an account.", description = "Deletes the account with the corresponding IBAN.", security = {
        @SecurityRequirement(name = "AuthToken")    }, tags={ "Employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "The account was successfully deleted."),
        
        @ApiResponse(responseCode = "400", description = "The given input was not valid for this operation at this endpoint."),
        
        @ApiResponse(responseCode = "401", description = "The current auth token does not provide access to this resource."),
        
        @ApiResponse(responseCode = "404", description = "Could not find an account with the given IBAN."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error has occurred.") })
    @RequestMapping(value = "/accounts/{iban}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAccount(@Size(min=18,max=18) @Parameter(in = ParameterIn.PATH, description = "The IBAN of the to be deleted account, which must be 18 characters long.", required=true, schema=@Schema()) @PathVariable("iban") String iban) throws NotFoundException;


    @Operation(summary = "Gets all accounts.", description = "Returns all accounts.", security = {
        @SecurityRequirement(name = "AuthToken")    }, tags={ "Employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of all accounts.", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Account.class)))),
        
        @ApiResponse(responseCode = "401", description = "The current auth token does not provide access to this resource."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error has occurred.") })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> getAccounts();


    @Operation(summary = "Get the account with the specified IBAN.", description = "Get the account with the specified IBAN.", security = {
        @SecurityRequirement(name = "AuthToken")    }, tags={ "Customer", "Employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The account belonging to the given IBAN.", content = @Content(schema = @Schema(implementation = Account.class))),
        
        @ApiResponse(responseCode = "400", description = "The given input was not valid for this operation at this endpoint."),
        
        @ApiResponse(responseCode = "401", description = "The current auth token does not provide access to this resource."),
        
        @ApiResponse(responseCode = "404", description = "Could not find an account with the given IBAN."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error has occurred.") })
    @RequestMapping(value = "/accounts/{iban}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Account> getUserAccounts(@Parameter(in = ParameterIn.PATH, description = "The IBAN of the account to get.", required=true, schema=@Schema()) @PathVariable("iban") String iban);


    @Operation(summary = "Edit an existing account.", description = "Edit the account with the specified IBAN.", security = {
        @SecurityRequirement(name = "AuthToken")    }, tags={ "Employee", "Customer" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "The account has been changed."),
        
        @ApiResponse(responseCode = "400", description = "The given input was not valid for this operation at this endpoint."),
        
        @ApiResponse(responseCode = "401", description = "The current auth token does not provide access to this resource."),
        
        @ApiResponse(responseCode = "404", description = "No user was found with the given") })
    @RequestMapping(value = "/accounts/{iban}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> regularEditAccount(@Parameter(in = ParameterIn.PATH, description = "The IBAN of the account to edit", required=true, schema=@Schema()) @PathVariable("iban") String iban, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UpdateAccountPutBody body);

}

